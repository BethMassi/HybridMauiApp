{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","hybridwebview/HybridWebView.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","window","HybridWebView","DispatchHybridWebViewMessage","message","event","CustomEvent","detail","dispatchEvent","chrome","webview","addEventListener","arg","data","webkit","messageHandlers","webwindowinterop","external","__SendMessageInternal","messageToSend","postMessage","hybridWebViewHost","sendMessage","taskId","methodName","args","Symbol","toStringTag","then","asyncResult","__TriggerAsyncCallback","catch","error","console","syncResult","result","JSON","stringify","Init","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","isLoading","setIsLoading","HybridWebViewSendInvokeMessageToDotNet","jsonArgs","SendRawMessage","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","globalSetData","newData","log","newTask","nanoid","tabIndex","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7da7d99.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName || props.name}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","// Standard methods for HybridWebView\n\nwindow.HybridWebView = {\n  \"Init\": function () {\n      function DispatchHybridWebViewMessage(message) {\n          const event = new CustomEvent(\"HybridWebViewMessageReceived\", { detail: { message: message } });\n          window.dispatchEvent(event);\n      }\n\n      if (window.chrome && window.chrome.webview) {\n          // Windows WebView2\n          window.chrome.webview.addEventListener('message', arg => {\n              DispatchHybridWebViewMessage(arg.data);\n          });\n      }\n      else if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.webwindowinterop) {\n          // iOS and MacCatalyst WKWebView\n          window.external = {\n              \"receiveMessage\": message => {\n                  DispatchHybridWebViewMessage(message);\n              }\n          };\n      }\n      else {\n          // Android WebView\n          window.addEventListener('message', arg => {\n              DispatchHybridWebViewMessage(arg.data);\n          });\n      }\n  },\n\n  \"SendRawMessage\": function (message) {\n      window.HybridWebView.__SendMessageInternal('RawMessage', message);\n  },\n\n  \"__SendMessageInternal\": function (type, message) {\n\n      const messageToSend = type + '|' + message;\n\n      if (window.chrome && window.chrome.webview) {\n          // Windows WebView2\n          window.chrome.webview.postMessage(messageToSend);\n      }\n      else if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.webwindowinterop) {\n          // iOS and MacCatalyst WKWebView\n          window.webkit.messageHandlers.webwindowinterop.postMessage(messageToSend);\n      }\n      else {\n          // Android WebView\n          window.hybridWebViewHost.sendMessage(messageToSend);\n      }\n  },\n\n  \"InvokeMethod\": function (taskId, methodName, args) {\n      if (methodName[Symbol.toStringTag] === 'AsyncFunction') {\n          // For async methods, we need to call the method and then trigger the callback when it's done\n          const asyncPromise = methodName(...args);\n          asyncPromise\n              .then(asyncResult => {\n                  window.HybridWebView.__TriggerAsyncCallback(taskId, asyncResult);\n              })\n              .catch(error => console.error(error));\n      } else {\n          // For sync methods, we can call the method and trigger the callback immediately\n          const syncResult = methodName(...args);\n          window.HybridWebView.__TriggerAsyncCallback(taskId, syncResult);\n      }\n  },\n\n  \"__TriggerAsyncCallback\": function (taskId, result) {\n      // Make sure the result is a string\n      if (result && typeof (result) !== 'string') {\n          result = JSON.stringify(result);\n      }\n\n      window.HybridWebView.__SendMessageInternal('InvokeMethodCompleted', taskId + '|' + result);\n  }\n}\n\nwindow.HybridWebView.Init();\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\nimport './hybridwebview/HybridWebView.js';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"All\");\n  const [isLoading, setIsLoading] = useState(true);\n  const HybridWebView = window.HybridWebView;\n\n  function HybridWebViewSendInvokeMessageToDotNet(methodName, args) {\n    const jsonArgs = JSON.stringify(args);\n    HybridWebView.SendRawMessage(\"Invoke:\" + methodName + \":\" + jsonArgs);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new obkect\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    HybridWebViewSendInvokeMessageToDotNet(\"ToggleCompletedTask\", [id]);\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    HybridWebViewSendInvokeMessageToDotNet(\"DeleteTask\", [id]);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    HybridWebViewSendInvokeMessageToDotNet(\"EditTask\", [id, newName]);\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    HybridWebViewSendInvokeMessageToDotNet(\"AddTask\", [newTask]);\n    setTasks([...tasks, newTask]);\n  }\n\n  const tasksNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  window.globalSetData = function (newData) {\n    setIsLoading(false);\n    setTasks(newData);\n    console.log(\"New data arrived with \" + newData.length + \" item(s)\");\n    return \"null\";\n  };\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n\n    // Start initial data load\n    console.log(\"Start loading...\");\n    HybridWebViewSendInvokeMessageToDotNet(\"StartTaskLoading\");\n  }, [tasks.length, prevTaskLength]);\n\n\n  //window.setTimeout(function() { setIsLoading(false);}, 2000);\n\n  if (isLoading) {\n    return (\n      <div className=\"todoapp stack-large\">\n        <h2>Loading items...</h2>\n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"todoapp stack-large\">\n        <Form addTask={addTask} />\n        <div className=\"filters btn-group stack-exception\">{filterList}</div>\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {headingText}\n        </h2>\n        <ul\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\">\n          {taskList}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}